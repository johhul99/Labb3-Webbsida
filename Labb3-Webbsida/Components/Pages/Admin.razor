@page "/admin"
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject IJSRuntime JS
@rendermode InteractiveServer

@if(!isAuthenticated)
{
    <h3>Admin login</h3>
    <input type="text" @bind="username" placeholder="Användarnamn" class="mb-1 form-control w-100" />
    <br/>
    <input type="password" @bind="password" placeholder="Lösenord" class="mb-2 form-control w-100" />
    <br/>
    <button @onclick="Login" class="btn btn-primary p-1">Logga in</button>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="mb-4" text-white bg-danger p-2 rounded>@errorMessage</p>
    }
}
else
{
    <AuthorizeView>
        <Authorized>
            <h3>Lägg till teknologier</h3>
            <EditForm Model="@techModel" OnValidSubmit="@AddTechnology">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <input type="text" @bind="techModel.Name" placeholder="Namn" class="mb-1 form-control w-100"/>
                <ValidationMessage For="@(() => techModel.Name)" />

                <br/>

                <input type="number" @bind="techModel.YearsOfExperience" placeholder="Antal år erfarenhet" class="mb-1 form-control w-100" />
                <ValidationMessage For="@(() => techModel.YearsOfExperience)" />

                <br/>

                <select @bind="techModel.SkillLevel" class="form-select mb-2 w-100">
                    <option value="">Kunskapsnivå</option>
                    <option value="Beginner">Beginner</option>
                    <option value="Intermediate">Intermediate</option>
                    <option value="Advanced">Advanced</option>
                    <option value="Expert">Expert</option>
                </select>
                <ValidationMessage For="@(() => techModel.SkillLevel)" />

                <br/>

                <button type="submit" class="btn btn-primary mb-4" disabled="@isSubmitting">
                    @(isSubmitting ? "Lägger till..." : "Lägg till")
                </button>
            </EditForm>

            @if (!string.IsNullOrEmpty(newTechAdded))
            {
                <p class="mb-4 text-white bg-success p-2 rounded">@newTechAdded</p>
            }
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <p class="mb-4 text-white bg-danger p-2 rounded">@errorMessage</p>
            }

            <br/>
            <button @onclick="Logout" class="btn btn-danger">Logga ut</button>
        </Authorized>
        <NotAuthorized>
            <h3>Endast admin har åtkomst till denna sida</h3>
        </NotAuthorized>
    </AuthorizeView>
}






@code {
    private string username = string.Empty;
    private string password = string.Empty;
    private bool isAuthenticated = false;
    private bool isRendered = false;
    private bool isSubmitting = false;

    private string newTechAdded = string.Empty;
    private string errorMessage = string.Empty;

    private TechnologyModel techModel = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

            if(!string.IsNullOrEmpty(token)){
                isAuthenticated = true;
                StateHasChanged();
            }

            isRendered = true;
        }
    }

    private async Task Login()
    {
        errorMessage = string.Empty;
        var loginData = new { Username = username, Password = password };
        var response = await Http.PostAsJsonAsync("https://localhost:7011/login", loginData);

        if(response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Rådata från API: {json}");
            var token = JsonSerializer.Deserialize<JwtResponse>(json)?.Token;

            if(!string.IsNullOrEmpty(token)) 
            {
                await JS.InvokeVoidAsync("localStorage.setItem", "authToken", token);
                Console.WriteLine("🔍 Token sparad i localStorage.");
                isAuthenticated = true;
                StateHasChanged();
            }      
        }
        else{
            errorMessage = "Felaktigt användarnamn eller lösenord.";

            await ClearMessages();
        }
    }

    private async Task Logout()
    {
        await JS.InvokeVoidAsync("localStorage.removeItem", "authToken");
        isAuthenticated = false;
        username = string.Empty;
        password = string.Empty;
        StateHasChanged();
    }

    private async Task ClearMessages()
    {
        await Task.Delay(4000);
        newTechAdded = string.Empty;
        errorMessage = string.Empty;
        await InvokeAsync(StateHasChanged);
    }

    private async Task AddTechnology()
    {
        if (isSubmitting) return;
        isSubmitting = true;

        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (string.IsNullOrEmpty(token))
            {
                errorMessage = "Du måste vara inloggad.";
                StateHasChanged();
                return;
            }

            var request = new HttpRequestMessage(HttpMethod.Post, "https://localhost:7210/technology")
            {
                Content = JsonContent.Create(techModel),
                Headers = { { "Authorization", $"Bearer {token}" } }
            };

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                newTechAdded = $"{techModel.Name} tillagt på CV!";
            }
            else
            {
                errorMessage = $"Gick ej att lägga till. Felkod: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }

        techModel = new();
        await InvokeAsync(StateHasChanged);
        await ClearMessages();
    }



    private class JwtResponse
    {
        [JsonPropertyName("token")]
        public string Token { get; set; }
    }

    public class TechnologyModel
    {
        [Required(ErrorMessage = "Namn är obligatoriskt.")]
        [MinLength(2, ErrorMessage = "Namnet måste vara minst 2 tecken långt.")]
        public string Name { get; set; } = string.Empty;

        [Range(0, 50, ErrorMessage = "Erfarenhet måste vara mellan 0 och 50 år.")]
        public float YearsOfExperience { get; set; }

        [Required(ErrorMessage = "Välj en kunskapsnivå.")]
        public string SkillLevel { get; set; } = string.Empty;
    }

}

@page "/admin"
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Admin</PageTitle>

@if (!isAuthenticated)
{
    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-12 col-md-4">
                <div class="card p-4 shadow">
                    <h3 class="text-center">Admin Login</h3>
                    <input type="text" @bind="username" placeholder="Användarnamn" class="form-control mb-2" />
                    <input type="password" @bind="password" placeholder="Lösenord" class="form-control mb-3" />
                    <button @onclick="Login" class="btn btn-primary w-100" disabled="@isSubmitting">
                        @(isSubmitting ? "Loggar in..." : "Logga in")
                    </button>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <p class="text-white bg-danger p-2 mt-3 rounded text-center">@errorMessage</p>
                    }
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-12 col-md-8">
                <div class="card p-4 shadow">
                    <h3 class="text-center">Lägg till Teknologi</h3>

                    <EditForm Model="@techModel" OnValidSubmit="@AddTechnology">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <input type="text" @bind="techModel.Name" placeholder="Namn" class="form-control" />
                            <ValidationMessage For="@(() => techModel.Name)" />
                        </div>

                        <div class="mb-3">
                            <input type="number" @bind="techModel.YearsOfExperience" placeholder="Antal år erfarenhet" class="form-control" />
                            <ValidationMessage For="@(() => techModel.YearsOfExperience)" />
                        </div>

                        <div class="mb-3">
                            <select @bind="techModel.SkillLevel" class="form-select">
                                <option value="">Kunskapsnivå</option>
                                <option value="Beginner">Beginner</option>
                                <option value="Intermediate">Intermediate</option>
                                <option value="Advanced">Advanced</option>
                                <option value="Expert">Expert</option>
                            </select>
                            <ValidationMessage For="@(() => techModel.SkillLevel)" />
                        </div>

                        <button type="submit" class="btn btn-primary w-100" disabled="@isSubmitting">
                            @(isSubmitting ? "Lägger till..." : "Lägg till")
                        </button>
                    </EditForm>

                    @if (!string.IsNullOrEmpty(newTechAdded))
                    {
                        <p class="text-white bg-success p-2 mt-3 rounded text-center">@newTechAdded</p>
                    }

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <p class="text-white bg-danger p-2 mt-3 rounded text-center">@errorMessage</p>
                    }
                </div>
            </div>
        </div>

        <div class="text-center mt-4">
            <button @onclick="Logout" class="btn btn-danger">Logga ut</button>
        </div>
    </div>
}





@code {
    private string username = string.Empty;
    private string password = string.Empty;
    private bool isAuthenticated = false;
    private bool isSubmitting = false;

    private string newTechAdded = string.Empty;
    private string errorMessage = string.Empty;

    private TechnologyModel techModel = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

                if (!string.IsNullOrEmpty(token))
                {
                    isAuthenticated = true;
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ Fel i OnAfterRenderAsync: {ex.Message}");
        }
    }

    private async Task Login()
    {
        errorMessage = string.Empty;
        isSubmitting = true;
        var loginData = new { Username = username, Password = password };

        try
        {
            var response = await Http.PostAsJsonAsync("https://labb3-identityapi.azurewebsites.net/login", loginData);

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var token = JsonSerializer.Deserialize<JwtResponse>(json)?.Token;

                if (!string.IsNullOrEmpty(token))
                {
                    await JS.InvokeVoidAsync("localStorage.setItem", "authToken", token);
                    isAuthenticated = true;
                    await InvokeAsync(StateHasChanged);
                }
            }
            else
            {
                errorMessage = "Felaktigt användarnamn eller lösenord.";
                await InvokeAsync(StateHasChanged);
                await ClearMessages();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fel vid inloggning: {ex.Message}";
            await InvokeAsync(StateHasChanged);
        }

        isSubmitting = false;
    }


    private async Task Logout()
    {
        await JS.InvokeVoidAsync("localStorage.removeItem", "authToken");
        isAuthenticated = false;
        username = string.Empty;
        password = string.Empty;
        StateHasChanged();
    }


    private async Task ClearMessages()
    {
        await Task.Delay(4000);
        newTechAdded = string.Empty;
        errorMessage = string.Empty;
        await InvokeAsync(StateHasChanged);
    }

    private async Task AddTechnology()
    {
        if (isSubmitting) return;
        isSubmitting = true;

        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (string.IsNullOrEmpty(token))
            {
                errorMessage = "Du måste vara inloggad.";
                StateHasChanged();
                return;
            }

            var request = new HttpRequestMessage(HttpMethod.Post, "https://labb3-techapi.azurewebsites.net/technology")
            {
                Content = JsonContent.Create(techModel),
                Headers = { { "Authorization", $"Bearer {token}" } }
            };

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                newTechAdded = $"{techModel.Name} tillagt på CV!";
            }
            else
            {
                errorMessage = $"Gick ej att lägga till. Felkod: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }

        isSubmitting = false;
        techModel = new();
        await InvokeAsync(StateHasChanged);
        await ClearMessages();
    }



    private class JwtResponse
    {
        [JsonPropertyName("token")]
        public string Token { get; set; }
    }

    public class TechnologyModel
    {
        [Required(ErrorMessage = "Namn är obligatoriskt.")]
        [MinLength(2, ErrorMessage = "Namnet måste vara minst 2 tecken långt.")]
        public string Name { get; set; } = string.Empty;

        [Range(1, 50, ErrorMessage = "Erfarenhet måste vara mellan 1 och 50 år.")]
        public int YearsOfExperience { get; set; }

        [Required(ErrorMessage = "Välj en kunskapsnivå.")]
        public string SkillLevel { get; set; } = string.Empty;
    }

}
